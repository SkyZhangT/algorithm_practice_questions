import java.util.*;

/* Grouping Options
There are a number of people in a row. They must all be divided into a number of 
contiguous groups from left to right. If each group must be at least as large 
as the group to its left, determine how many distinct ways groups can be formed.
For a group to be distinct, it must differ in size for at least one group when 
sorted ascending. For exmample, [1, 1, 1, 3] is distinct from [1, 1, 1, 2] but
not from [1, 3, 1, 1].
Author: Tianyang Zhang
Reference: https://www.1point3acres.com/bbs/thread-606351-1-1.html
Time complexity: O(mn)
Space complexity: O(mn)
Example 1:
Input: 
n = 8
k = 4
Output: 
5
Explanation:
[1,1,1,5], [1,1,2,4], [1,1,3,3], [1,2,2,3], [2,2,2,2] */


public class GroupingOptions {
	public static void main(String[] args) {
		int n = 1524, k = 4;
		int result = groupingOptions(n, k);
		int key = (int) backpack(n, k);
		
		if(result == key) System.out.println("Correct!");
		else System.out.println("Wrong! " + "result: " + Integer.toString(result) + " should be " + Integer.toString(key));
		
	}
	

	public static int groupingOptions(int n, int k){
		
		int[][] dp= new int[n+1][k+1];
		dp[0][0] = 1;
		
		for(int i = 1; i <= n; i++) {
			for(int j = 1; j <= Math.min(i, k); j++) {
				dp[i][j] = dp[i-j][j] + dp[i - 1][j - 1];
			}
		}
		
		return dp[n][k];
	}
	
	public static long backpack(int people, int groups) {
	    long[][] dp = new long[people + 1][groups + 1];                dp[0][0] = 1;
	    for (int i = 1; i <= people - groups + 1; ++i) {
	        for (int j = i; j <= people; ++j) {
	            for (int k = 1; k <= groups; ++k) {
	                dp[j][k] += dp[j - i][k - 1];
	            }
	        }
	    }
	    return dp[people][groups];
	}

}


